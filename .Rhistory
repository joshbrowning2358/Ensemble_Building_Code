files = list.files()
files = files[files!="cvModel Samples.R"]
for(file in files)
source(file)
randArgs
rm(file, files)
package.skeleton("ensemble", ls())
cvModel
d = data.frame( x=rnorm(1000), y=rnorm(1000) )
cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T) )
cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), form="y ~ x", data=d )
cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), form="y ~ x", d=d )
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), form="y ~ x", d=d )
is(out)
names(out)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
d$y
d$x
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
source("ensemble/R/cvModel.R")
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
NROW(d$x)
length(d$y)
source('~/GitHub/Ensemble_Building_Code/ensemble/R/cvModel.R', echo=TRUE)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
x = d$x
x = as.matrix(x)
rownames(x)
n = ifelse( is.null(form), length(y), nrow(d) )
n =
length(y)
y = d$y
n =
length(y)
n
set.seed(seed)
ensem = data.frame( matrix(0, nrow=n, ncol=pred.cols ) )
x = as.matrix(x)
rownames(x) = 1:n
x
source('~/GitHub/Ensemble_Building_Code/ensemble/R/cvModel.R', echo=TRUE)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
rm(list=ls() )
source('~/GitHub/Ensemble_Building_Code/ensemble/R/cvModel.R', echo=TRUE)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
d = data.frame( x=rnorm(1000), y=rnorm(1000) )
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
x = d$x
y = d$y
modelFunc = glm
predFunc=predict
d=NULL
form=NULL
args=list()
pred.cols=1
saveMods=F
seed=321
cvGroup = sample(1:10, 1000, replace=T)
sysCall = paste( deparse( sys.call() ), collapse=" ")
#Data quality checks
if(!is(modelFunc,"function"))
stop("func must be a function!")
if(is.null(form) & (!is.null(d) | is.null(x) | is.null(y)))
stop("Must specify form, d OR x, y")
if(is.null(x) & (!is.null(y) | is.null(form) | is.null(d)))
stop("Must specify form, d OR x, y")
if(!is.null(x) & !is.null(form))
stop("Must specify form, d OR x, y")
if(!is.null(x))
if(NROW(x)!=length(y))
stop("Number of rows of x must be the same as length of y!")
n = ifelse( is.null(form), length(y), nrow(d) )
if(length(cvGroup)!=n)
stop("length(cvGroup)!=nrow(d).  Maybe cvGroup is a matrix?")
set.seed(seed)
ensem = data.frame( matrix(0, nrow=n, ncol=pred.cols ) )
colnames(ensem) = paste0("V",1:ncol(ensem))
#Set up the rownames of ensem to match d. This makes inserting in predicted values much easier later:
rownames(ensem) = 1:n
if(is.null(form)){
x = as.matrix(x)
rownames(x) = 1:n
} else {
rownames(d) = 1:n
}
mods = list()
x
i=1
if(is.null(form)){
newArgs = c(list(y=y[!cvGroup %in% c(-1,i)]), args)
newArgs = c(list(x=x[!cvGroup %in% c(-1,i),]), newArgs)
predData = x[cvGroup %in% c(-1,i),]
} else {
newArgs = c(list(data=d[!cvGroup %in% c(-1,i),]), args)
newArgs = c(list(form=form), newArgs)
predData = d[cvGroup %in% c(-1,i),]
}
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
predData
predData = d[cvGroup %in% c(-1,i),,drop=F]
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
predData
dim( d)
d
predData = x[cvGroup %in% c(-1,i),,drop=F]
predData
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
fit = do.call( modelFunc, args=newArgs )
preds = predFunc(fit, newdata=predData )
source('~/.active-rstudio-document', echo=TRUE)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
rm( list=ls() )
d = data.frame( x=rnorm(1000), y=rnorm(1000) )
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
source('~/GitHub/Ensemble_Building_Code/ensemble/R/cvModel.R', echo=TRUE)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
library(glmnet)
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), form="y ~ x1 + x2", d=d )
library(glmnet)
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d$x, y=d$y )
head(d)
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y )
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predict=function(fit, newdata){predict(fit, newx=newdata)})
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata)})
summary(out)
out$ensemble
names(out)
out$models
out$call
out = cvModel( glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata)})
modelFunc=glmnet
cvGroup=sample(1:10, size=1000, replace=T)
x=d[,1:2]
y=d$y
predFunc=function(fit, newdata){predict(fit, newx=newdata)}
rm(d)
predFunc
d=NULL
form=NULL
args=list()
pred.cols=1
saveMods=F
seed=321
sysCall = paste( deparse( sys.call() ), collapse=" ")
#Data quality checks
if(!is(modelFunc,"function"))
stop("func must be a function!")
if(is.null(form) & (!is.null(d) | is.null(x) | is.null(y)))
stop("Must specify form, d OR x, y")
if(is.null(x) & (!is.null(y) | is.null(form) | is.null(d)))
stop("Must specify form, d OR x, y")
if(!is.null(x) & !is.null(form))
stop("Must specify form, d OR x, y")
if(!is.null(x))
if(NROW(x)!=length(y))
stop("Number of rows of x must be the same as length of y!")
n = ifelse( is.null(form), length(y), nrow(d) )
if(length(cvGroup)!=n)
stop("length(cvGroup)!=nrow(d).  Maybe cvGroup is a matrix?")
set.seed(seed)
ensem = data.frame( matrix(0, nrow=n, ncol=pred.cols ) )
colnames(ensem) = paste0("V",1:ncol(ensem))
#Set up the rownames of ensem to match d. This makes inserting in predicted values much easier later:
rownames(ensem) = 1:n
if(is.null(form)){
x = as.matrix(x)
rownames(x) = 1:n
} else {
rownames(d) = 1:n
}
#Store the models, if desirable.  Create a mods list in either case, so return method is always consistent.
mods = list()
#Set up the model formula and rename the columns of d appropriately:
#Holdout each cv-group in turn:
for( i in sort(unique(cvGroup[cvGroup>0])) ){
if(is.null(form)){
newArgs = c(list(y=y[!cvGroup %in% c(-1,i)]), args)
newArgs = c(list(x=x[!cvGroup %in% c(-1,i),]), newArgs)
predData = x[cvGroup %in% c(-1,i),,drop=F]
} else {
newArgs = c(list(data=d[!cvGroup %in% c(-1,i),]), args)
newArgs = c(list(form=form), newArgs)
predData = d[cvGroup %in% c(-1,i),,drop=F]
}
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
#Evaluate the model
fit = do.call( modelFunc, args=newArgs )
preds = predFunc(fit, newdata=predData )
if(is.null(dim(preds)) | (is(preds,"array") & length(dim(preds))==1) )
preds = matrix(preds,ncol=1)
if(saveMods)
mods[[length(mods)+1]] = fit
rownames(preds) = rownames(predData)
#Insert the predicted values for the cv group into the ensem data.frame.
pred.index = (1:nrow(ensem))[cvGroup==i]
ensem[pred.index,] = preds[rownames(preds) %in% pred.index,]
#Insert the predicted values for the test group into the ensem data.frame, but divide by the number of cv-folds (since each fold has a diff. prediction)
test.index = (1:nrow(ensem))[cvGroup==-1]
ensem[test.index,] = ensem[test.index,] + preds[rownames(preds) %in% test.index,]/(length(unique(cvGroup))-1)
print(paste0("Model ",i,"/",length(unique(cvGroup[cvGroup>0]))," has finished"))
}
i=1
is.null(form)
newArgs = c(list(y=y[!cvGroup %in% c(-1,i)]), args)
newArgs = c(list(x=x[!cvGroup %in% c(-1,i),]), newArgs)
predData = x[cvGroup %in% c(-1,i),,drop=F]
predData
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
fit = do.call( modelFunc, args=newArgs )
preds = predFunc(fit, newdata=predData )
preds
is.null(dim(preds))
is.null(dim(preds)) | (is(preds,"array") & length(dim(preds))==1)
dim( preds )
rownames(preds) = rownames(predData)
pred.index = (1:nrow(ensem))[cvGroup==i]
ensem[pred.index,] = preds[rownames(preds) %in% pred.index,]
dim( ensem )
dim( preds )
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, lambda=1)})
d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, lambda=1)})
fit
fit = glmnet( d[,1:2], d[,3] )
dim( d )
fit = glmnet( x=d[,1:2], y=d[,3] )
?glmnet
fit = glmnet( x=d[,1:2], y=d$y )
is( d 0
is( d )
d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
fit = glmnet( x=d[,1:2], y=d$y )
glmnet( x=d[,1:2], y=d$y )
is( d[,1] )
is( d[,2] )
is( d[,3] )
summary(d)
is( d[,1:2] )
glmnet( x=matrix(d[,1:2]), y=d$y )
fit = glmnet( x=as.matrix(d[,1:2]), y=d$y )
predict(fit, newx=as.matrix(d[,1:2]) )
predict(fit, newx=as.matrix(d[,1:2]), lambda=1 )
?predict.glmnet
predict(fit, newx=as.matrix(d[,1:2]), s=1 )
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=1)})
out
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}, pred.cols=4)
out
fit
is( fit )
predict( fit, newx=as.matrix(d[,1:2]) )
predict( fit, newx=as.matrix(d[,1:2]), s=c(1,2,3,4) )
dim( predict( fit, newx=as.matrix(d[,1:2]), s=c(1,2,3,4) ) )
dim( predict( fit, newx=as.matrix(d[,1:2]), s=c(4,2,1,.5) ) )
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}, pred.cols=16)
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}, pred.cols=16)
modelFunc=glmnet
cvGroup=sample(1:10, size=1000, replace=T)
x=d[,1:2]
y=d$y
predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
pred.cols=4
d = NULL
sysCall = paste( deparse( sys.call() ), collapse=" ")
#Data quality checks
if(!is(modelFunc,"function"))
stop("func must be a function!")
if(is.null(form) & (!is.null(d) | is.null(x) | is.null(y)))
stop("Must specify form, d OR x, y")
if(is.null(x) & (!is.null(y) | is.null(form) | is.null(d)))
stop("Must specify form, d OR x, y")
if(!is.null(x) & !is.null(form))
stop("Must specify form, d OR x, y")
if(!is.null(x))
if(NROW(x)!=length(y))
stop("Number of rows of x must be the same as length of y!")
n = ifelse( is.null(form), length(y), nrow(d) )
if(length(cvGroup)!=n)
stop("length(cvGroup)!=nrow(d).  Maybe cvGroup is a matrix?")
set.seed(seed)
ensem = data.frame( matrix(0, nrow=n, ncol=pred.cols ) )
colnames(ensem) = paste0("V",1:ncol(ensem))
#Set up the rownames of ensem to match d. This makes inserting in predicted values much easier later:
rownames(ensem) = 1:n
if(is.null(form)){
x = as.matrix(x)
rownames(x) = 1:n
} else {
rownames(d) = 1:n
}
#Store the models, if desirable.  Create a mods list in either case, so return method is always consistent.
mods = list()
i=1
if(is.null(form)){
newArgs = c(list(y=y[!cvGroup %in% c(-1,i)]), args)
newArgs = c(list(x=x[!cvGroup %in% c(-1,i),]), newArgs)
predData = x[cvGroup %in% c(-1,i),,drop=F]
} else {
newArgs = c(list(data=d[!cvGroup %in% c(-1,i),]), args)
newArgs = c(list(form=form), newArgs)
predData = d[cvGroup %in% c(-1,i),,drop=F]
}
predData
rownames(predData) = rownames(ensem)[cvGroup %in% c(-1,i)]
fit = do.call( modelFunc, args=newArgs )
preds = predFunc(fit, newdata=predData )
preds
dim( preds )
if(is.null(dim(preds)) | (is(preds,"array") & length(dim(preds))==1) )
preds = matrix(preds,ncol=1)
dim( preds )
if(saveMods)
mods[[length(mods)+1]] = fit
rownames(preds) = rownames(predData)
pred.index = (1:nrow(ensem))[cvGroup==i]
dim( preds )
ensem[pred.index,]
preds[rownames(preds) %in% pred.index,]
ensem[pred.index,] = preds[rownames(preds) %in% pred.index,]
test.index = (1:nrow(ensem))[cvGroup==-1]
ensem[test.index,] = ensem[test.index,] + preds[rownames(preds) %in% test.index,]/(length(unique(cvGroup))-1)
ensem[test.index,]
ensem[test.index,]
preds[rownames(preds) %in% test.index,]/(length(unique(cvGroup))-1)
ensem[test.index,] = ensem[test.index,] + preds[rownames(preds) %in% test.index,]/(length(unique(cvGroup))-1)
test.index
test.index = (1:nrow(ensem))[cvGroup==-1]
if(length(test.index>0))
ensem[test.index,] = ensem[test.index,] + preds[rownames(preds) %in% test.index,]/(length(unique(cvGroup))-1)
source('~/GitHub/Ensemble_Building_Code/ensemble/R/cvModel.R', echo=TRUE)
d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
out = cvModel( modelFunc=glmnet, cvGroup=sample(1:10, size=1000, replace=T), x=d[,1:2], y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}, pred.cols=4)
out = cvModel( glm, cvGroup=sample(1:10, size=1000, replace=T), form="y ~ x1 + x2", d=d )
is(out)
names(out)
length(out$ensemble)
dim(out$ensemble)
out$call
out2 = cvModel( modelFunc=glmnet
,cvGroup=sample(1:10, size=1000, replace=T)
,x=d[,1:2]
,y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
,pred.cols=4)
out2$ensemble
d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
#Assume last 100 rows are test data
cvGroup = c(sample(1:10,size=900,replace=T), rep(-1,100))
out = cvModel( modelFunc=glm
,cvGroup=sample(1:10, size=1000, replace=T)
,form="y ~ x1 + x2"
,d=d )
library(glmnet)
out2 = cvModel( modelFunc=glmnet
,cvGroup=sample(1:10, size=1000, replace=T)
,x=d[,1:2]
,y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
,pred.cols=4)
out = cvModel( modelFunc=glm
,cvGroup=cvGroup
,form="y ~ x1 + x2"
,d=d )
library(glmnet)
out2 = cvModel( modelFunc=glmnet
,cvGroup=cvGroup
,x=d[,1:2]
,y=d$y
,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
,pred.cols=4)
source('~/GitHub/Ensemble_Building_Code/ensemble/R/makeEnsem.R', echo=TRUE)
makeEnsem(actual=cbind(out$ensemble, out2$ensemble))
source('~/GitHub/Ensemble_Building_Code/ensemble/R/makeEnsem.R', echo=TRUE)
source('~/GitHub/Ensemble_Building_Code/ensemble/R/makeEnsem.R', echo=TRUE)
makeEnsem(actual=cbind(out$ensemble, out2$ensemble))
getwd()
list.files()
setwd("..")
actual=cbind(out$ensemble, out2$ensemble)
args(makeEnsem)
source('~/GitHub/Ensemble_Building_Code/ensemble/R/makeEnsem.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dir.create("Submissions")
write.csv(out$ensemble, file="glm_raw.csv")
write.csv(out2$ensemble, file="glmnet_raw.csv")
makeEnsem(actual=d$y)
write.csv(out$ensemble, file="Submissions/glm_raw.csv")
write.csv(out2$ensemble, file="Submissions/glmnet_raw.csv")
makeEnsem(actual=d$y)
d$y[901:1000] = NA
makeEnsem(actual=d$y)
getwd()
setwd("..")
makeEnsem(actual=d$y)
getwd()
setwd("..")
actual = d$y
d$y
lossFunc=function(preds, actual){
mean( (preds-actual)^2 )
}
numIters=100
topN=10
prune=.7
baseLoss=.5
if(numIters<1)
stop("numIters must be positive!")
if(topN<0)
stop("top must be non-negative!")
if(prune>1 | prune<0)
stop("prune must be between 0 and 1!")
if(!"Submissions" %in% list.files())
stop("No 'Submissions' directory!")
trainRows = !is.na(actual)
testRows = is.na(actual)
setwd("Submissions")
files = list.files()
files = files[grepl("_raw", files)]
files
if(length(files)==0){
setwd("..")
stop("No model files to combine from 'Submissions' directory!")
}
ensemDf = data.frame( read.csv(files[1]) )
if(length(actual)!=nrow(ensemDf))
stop("length(actual)!=nrow(ensemDf).  Ensure actual has NA's for test obs!")
colnames(ensemDf) = gsub("_raw.csv", "", files[1])
colnames(ensemDf) = gsub("_raw.csv", "", files[1])
for(file in files[-1] ){
ensemDf = cbind(ensemDf, read.csv( file ) )
colnames(ensemDf)[ncol(ensemDf)] = gsub("_raw.csv", "", file)
}
summary( ensemDf )
lossVec = sapply( 1:ncol( ensemDf ), function(i){
lossFunc( ensemDf[trainRows,i] , actual[trainRows] )
} )
ensemDf = ensemDf[,lossVec>=baseLoss]
lossVec	= lossVec[lossVec>=baseLoss]
ensemDf = ensemDf[,rank(lossVec)<=length(lossVec)*(1-prune)]
lossVec	= lossVec[rank(lossVec)<=length(lossVec)*(1-prune)]
preds		= apply( ensemDf[,rank(lossVec)<=topN], 1, mean )	#Can let in more than top.N, depending on rank
ensemDf[,rank(lossVec)<=topN]
dim( ensemDf )
is( ensemDf )
ensemDf
ensemDf = data.frame( read.csv(files[1]) )
if(length(actual)!=nrow(ensemDf)){
setwd("..")
stop("length(actual)!=nrow(ensemDf).  Ensure actual has NA's for test obs!")
}
colnames(ensemDf) = gsub("_raw.csv", "", files[1])
for(file in files[-1] ){
ensemDf = cbind(ensemDf, read.csv( file ) )
colnames(ensemDf)[ncol(ensemDf)] = gsub("_raw.csv", "", file)
}
lossVec = sapply( 1:ncol( ensemDf ), function(i){
lossFunc( ensemDf[trainRows,i] , actual[trainRows] )
} )
lossVec>=baseLoss
dim( ensemDf )
dim( ensemDf[,lossVec>=baseLoss] )
ensemDf = ensemDf[,lossVec>=baseLoss]
lossVec	= lossVec[lossVec>=baseLoss]
dim( ensemDf[,rank(lossVec)<=length(lossVec)*(1-prune)] )
rank(lossVec)<=length(lossVec)*(1-prune)
ensemDf = ensemDf[,rank(lossVec)<=length(lossVec)*(1-prune),drop=F]
ensemDf
lossVec	= lossVec[rank(lossVec)<=length(lossVec)*(1-prune)]
lossVec
preds		= apply( ensemDf[,rank(lossVec)<=topN], 1, mean )	#Can let in more than top.N, depending on rank
dim( ensemDf )
prune
prune = .3
source('~/GitHub/Ensemble_Building_Code/ensemble/R/makeEnsem.R', echo=TRUE)
write.csv(out$ensemble, file="Submissions/glm_raw.csv", row.names=F)
write.csv(out2$ensemble, file="Submissions/glmnet_raw.csv", row.names=F)
getwd()
setwd("..")
write.csv(out$ensemble, file="Submissions/glm_raw.csv", row.names=F)
write.csv(out2$ensemble, file="Submissions/glmnet_raw.csv", row.names=F)
makeEnsem(actual=d$y)
makeEnsem(actual=d$y, prune=.2)
ensem = makeEnsem(actual=d$y, prune=.2)
names(ensem)
ensem$preds
length( ensem$preds)
names(ensem)
ensem$bestLoss
names(ensem)
ensem$weights
source('~/GitHub/Ensemble_Building_Code/ensemble/R/optParams.R', echo=TRUE)
args(optParams)
optParams(func=glm, x=d[,1:2], y=d[,3], nTrain=c(100,300) )
library(glmnet)
library(randomForest)
?randomForest
args(optParams)
optParams(func=randomForest, x=d[,1:2], y=d[,3], nTrain=c(100,300)
,optArgs=list("ntree"))
install.packages("Rtools")
