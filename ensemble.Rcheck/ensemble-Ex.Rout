
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ensemble"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ensemble')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cvModel")
> ### * cvModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cvModel
> ### Title: Build an Cross-Validated Model
> ### Aliases: cvModel
> ### Keywords: cross-validation ensemble
> 
> ### ** Examples
> 
> d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
> out = cvModel( modelFunc=glm
+     ,cvGroup=sample(1:10, size=1000, replace=TRUE)
+     ,form="y ~ x1 + x2"
+     ,d=d )
[1] "Model 1/10 has finished"
[1] "Model 2/10 has finished"
[1] "Model 3/10 has finished"
[1] "Model 4/10 has finished"
[1] "Model 5/10 has finished"
[1] "Model 6/10 has finished"
[1] "Model 7/10 has finished"
[1] "Model 8/10 has finished"
[1] "Model 9/10 has finished"
[1] "Model 10/10 has finished"
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 1.9-5

> out = cvModel( modelFunc=glmnet
+     ,cvGroup=sample(1:10, size=1000, replace=TRUE)
+     ,x=d[,1:2]
+     ,y=d$y
+     ,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
+     ,pred.cols=4)
[1] "Model 1/10 has finished"
[1] "Model 2/10 has finished"
[1] "Model 3/10 has finished"
[1] "Model 4/10 has finished"
[1] "Model 5/10 has finished"
[1] "Model 6/10 has finished"
[1] "Model 7/10 has finished"
[1] "Model 8/10 has finished"
[1] "Model 9/10 has finished"
[1] "Model 10/10 has finished"
> 
> 
> 
> cleanEx()

detaching ‘package:glmnet’, ‘package:Matrix’

> nameEx("makeEnsem")
> ### * makeEnsem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeEnsem
> ### Title: Combine multiple predictions into a final ensemble prediction.
> ### Aliases: makeEnsem
> ### Keywords: ensemble cross-validate
> 
> ### ** Examples
> 
> d = data.frame( x1=rnorm(1000), x2=rnorm(1000), y=rnorm(1000) )
> #Assume last 100 rows are test data
> cvGroup = c(sample(1:10,size=900,replace=TRUE), rep(-1,100))
> d$y[901:1000] = NA
> out = cvModel( modelFunc=glm
+     ,cvGroup=cvGroup
+     ,form="y ~ x1 + x2"
+     ,d=d )
[1] "Model 1/10 has finished"
[1] "Model 2/10 has finished"
[1] "Model 3/10 has finished"
[1] "Model 4/10 has finished"
[1] "Model 5/10 has finished"
[1] "Model 6/10 has finished"
[1] "Model 7/10 has finished"
[1] "Model 8/10 has finished"
[1] "Model 9/10 has finished"
[1] "Model 10/10 has finished"
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 1.9-5

> out2 = cvModel( modelFunc=glmnet
+     ,cvGroup=cvGroup
+     ,x=d[,1:2]
+     ,y=d$y
+     ,predFunc=function(fit, newdata){predict(fit, newx=newdata, s=c(4,2,1,.5))}
+     ,pred.cols=4)
[1] "Model 1/10 has finished"
[1] "Model 2/10 has finished"
[1] "Model 3/10 has finished"
[1] "Model 4/10 has finished"
[1] "Model 5/10 has finished"
[1] "Model 6/10 has finished"
[1] "Model 7/10 has finished"
[1] "Model 8/10 has finished"
[1] "Model 9/10 has finished"
[1] "Model 10/10 has finished"
> dir.create("Submissions")
> write.csv(out$ensemble, file="Submissions/glm_raw.csv", row.names=FALSE)
> write.csv(out2$ensemble, file="Submissions/glmnet_raw.csv", row.names=FALSE)
> ensem = makeEnsem(actual=d$y, prune=.2)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.864 0.016 1.914 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
